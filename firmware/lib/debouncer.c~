/* blind.c - firmware source for window-blind driver.
 *
 * Copyright Â© 2016 Sergey Portnov, Eugeny Kaner
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/ .
 *
 * Authors: Sergey Portnov <sergius256@gmail.com>
 * Eugeny Kaner<kanerea@xakep.ru>
 *
 * Key debouncer algorithm: Peter Fleury <pfleury@gmx.ch>
 * http://jump.to/fleury, 
 * based on algorithm of Peter Dannegger <danni@specs.de>
 */

/*
 * Debouncer global variable, informs the main programm when a key is
 * pressed.  This variable must be declared 'volatile, since it is
 * accessed from both interrupt und main loop.
 */

#ifndef DEBOUNCE
#define DEBOUNCE 200UL		// debounce clock 200Hz = 5msec
#endif

static volatile uint8_t key_press=0;

ISR (TIMER0_COMPA_vect)
{
  static uint8_t key_state;	// debounced and inverted key state:
  static uint8_t ct0, ct1;      // holds two bit counter for each key
  uint8_t i;
 
  /*
   * read current state of keys (active-low),
   * clear corresponding bit in i when key has changed
   */
  i = key_state ^ ~((PIND & 0xF0) + (PINB & 0x0F)) ;   // key changed ?
  
  /* 
   * ct0 and ct1 form a two bit counter for each key,  
   * where ct0 holds LSB and ct1 holds MSB
   * After a key is pressed longer than four times the
   * sampling period, the corresponding bit in key_state is set
   */
  ct0 = ~( ct0 & i );	  // reset or count ct0
  ct1 = (ct0 ^ ct1) & i;  // reset or count ct1  
  i &= ct0 & ct1;	  // count until roll over ?
  key_state ^= i;	  // then toggle debounced state
  
  /*
   * To notify main program of pressed key, the correspondig bit
   * in global variable key_press is set.
   * The main loop needs to clear this bit
   */
  key_press |= key_state & i;	// 0->1: key press detect

}
