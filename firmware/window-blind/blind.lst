
blind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000a1e  00000ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800100  00800100  00000ab2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001005  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000868  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b30  00000000  00000000  0000241d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000492  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a9  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00003dbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
/* __do_clear_bss is only necessary if there is anything in .bss section.  */

#ifdef L_clear_bss
	.section .init4,"ax",@progbits
DEFUN __do_clear_bss
	ldi	r18, hi8(__bss_end)
  74:	21 e0       	ldi	r18, 0x01	; 1
	ldi	r26, lo8(__bss_start)
  76:	a0 e0       	ldi	r26, 0x00	; 0
	ldi	r27, hi8(__bss_start)
  78:	b1 e0       	ldi	r27, 0x01	; 1
	rjmp	.do_clear_bss_start
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
.do_clear_bss_loop:
	st	X+, __zero_reg__
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
.do_clear_bss_start:
	cpi	r26, lo8(__bss_end)
  7e:	a3 3a       	cpi	r26, 0xA3	; 163
	cpc	r27, r18
  80:	b2 07       	cpc	r27, r18
	brne	.do_clear_bss_loop
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 01 02 	call	0x402	; 0x402 <main>
  88:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <DoAttention>:
  fuinctionality.
 */

// Handler function for AT command

signed char DoAttention(void) {
  90:	e3 e3       	ldi	r30, 0x33	; 51
  92:	f1 e0       	ldi	r31, 0x01	; 1
  94:	a1 e6       	ldi	r26, 0x61	; 97
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	2e e3       	ldi	r18, 0x3E	; 62
  9a:	31 e0       	ldi	r19, 0x01	; 1
  short int i;
  for(i=0;i<INIT_LEN;i++)
    txbuffer[i]=device_id[i];
  9c:	81 91       	ld	r24, Z+
  9e:	8d 93       	st	X+, r24

// Handler function for AT command

signed char DoAttention(void) {
  short int i;
  for(i=0;i<INIT_LEN;i++)
  a0:	2e 17       	cp	r18, r30
  a2:	3f 07       	cpc	r19, r31
  a4:	d9 f7       	brne	.-10     	; 0x9c <DoAttention+0xc>
    txbuffer[i]=device_id[i];
  txbuffer[i]='O';  i++;
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	80 93 6c 01 	sts	0x016C, r24
  txbuffer[i]='K';  i++;
  ac:	8b e4       	ldi	r24, 0x4B	; 75
  ae:	80 93 6d 01 	sts	0x016D, r24
  txbuffer[i]='\n'; i++;
  b2:	8a e0       	ldi	r24, 0x0A	; 10
  b4:	80 93 6e 01 	sts	0x016E, r24
  txbuffer[i]=0;
  b8:	10 92 6f 01 	sts	0x016F, r1
  return 0;
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret

000000c0 <DoSet>:

// Handler function for SET command

signed char DoSet(void) {
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	00 d0       	rcall	.+0      	; 0xc6 <DoSet+0x6>
  c6:	00 d0       	rcall	.+0      	; 0xc8 <DoSet+0x8>
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	ef e3       	ldi	r30, 0x3F	; 63
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	ae 01       	movw	r20, r28
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	5f 4f       	sbci	r21, 0xFF	; 255
  d6:	da 01       	movw	r26, r20
  int i,pow;
  char number[4];

  for(i=0;(i<4) && (buffer[i]>='0') && (buffer[i]<='9');i++)
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	21 91       	ld	r18, Z+
  de:	30 ed       	ldi	r19, 0xD0	; 208
  e0:	32 0f       	add	r19, r18
  e2:	3a 30       	cpi	r19, 0x0A	; 10
  e4:	98 f5       	brcc	.+102    	; 0x14c <DoSet+0x8c>
    number[i]=buffer[i];
  e6:	2d 93       	st	X+, r18

signed char DoSet(void) {
  int i,pow;
  char number[4];

  for(i=0;(i<4) && (buffer[i]>='0') && (buffer[i]<='9');i++)
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	91 05       	cpc	r25, r1
  ee:	b1 f7       	brne	.-20     	; 0xdc <DoSet+0x1c>
    number[i]=buffer[i];

  if((i--)==0)
  f0:	e3 e0       	ldi	r30, 0x03	; 3
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	31 96       	adiw	r30, 0x01	; 1
  f6:	e4 0f       	add	r30, r20
  f8:	f5 1f       	adc	r31, r21
  fa:	30 e0       	ldi	r19, 0x00	; 0
    return -1;

  pow=1;
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	60 e0       	ldi	r22, 0x00	; 0
  DesiredPosition=0;
  for(;i>=0;i--) {
    DesiredPosition+=(number[i]-'0')*pow;
 100:	82 91       	ld	r24, -Z
 102:	80 53       	subi	r24, 0x30	; 48
 104:	82 9f       	mul	r24, r18
 106:	30 0d       	add	r19, r0
 108:	11 24       	eor	r1, r1
    pow=pow*10;
 10a:	82 2f       	mov	r24, r18
 10c:	96 2f       	mov	r25, r22
 10e:	bc 01       	movw	r22, r24
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	86 0f       	add	r24, r22
 122:	97 1f       	adc	r25, r23
 124:	28 2f       	mov	r18, r24
 126:	69 2f       	mov	r22, r25
  if((i--)==0)
    return -1;

  pow=1;
  DesiredPosition=0;
  for(;i>=0;i--) {
 128:	4e 17       	cp	r20, r30
 12a:	5f 07       	cpc	r21, r31
 12c:	49 f7       	brne	.-46     	; 0x100 <DoSet+0x40>
 12e:	30 93 00 01 	sts	0x0100, r19
    DesiredPosition+=(number[i]-'0')*pow;
    pow=pow*10;
  }

  // Some sanity check first
  if((DesiredPosition<0) || (DesiredPosition>100))
 132:	35 36       	cpi	r19, 0x65	; 101
 134:	78 f4       	brcc	.+30     	; 0x154 <DoSet+0x94>
    return -1;
  // After this DesiredPosition will be set to some value. If
  // DesiredPosition != CurrentPosition then finite-state machine will
  // handle this situation.
  ReportOkFlag=0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	80 93 32 01 	sts	0x0132, r24
  return 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
}
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret
  char number[4];

  for(i=0;(i<4) && (buffer[i]>='0') && (buffer[i]<='9');i++)
    number[i]=buffer[i];

  if((i--)==0)
 14c:	fc 01       	movw	r30, r24
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	89 2b       	or	r24, r25
 152:	81 f6       	brne	.-96     	; 0xf4 <DoSet+0x34>
    return -1;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	f3 cf       	rjmp	.-26     	; 0x13e <DoSet+0x7e>

00000158 <DoGet>:
  return 0;
}

// Handler function for GET command

signed char DoGet(void) {
 158:	e3 e3       	ldi	r30, 0x33	; 51
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	a1 e6       	ldi	r26, 0x61	; 97
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	2e e3       	ldi	r18, 0x3E	; 62
 162:	31 e0       	ldi	r19, 0x01	; 1
  short int i;
  for(i=0;i<INIT_LEN;i++)
    txbuffer[i]=device_id[i];
 164:	81 91       	ld	r24, Z+
 166:	8d 93       	st	X+, r24

// Handler function for GET command

signed char DoGet(void) {
  short int i;
  for(i=0;i<INIT_LEN;i++)
 168:	2e 17       	cp	r18, r30
 16a:	3f 07       	cpc	r19, r31
 16c:	d9 f7       	brne	.-10     	; 0x164 <DoGet+0xc>
    txbuffer[i]=device_id[i];
  txbuffer[i]='P';  i++;
 16e:	80 e5       	ldi	r24, 0x50	; 80
 170:	80 93 6c 01 	sts	0x016C, r24
  txbuffer[i]='O';  i++;
 174:	8f e4       	ldi	r24, 0x4F	; 79
 176:	80 93 6d 01 	sts	0x016D, r24
  txbuffer[i]='S';  i++;
 17a:	83 e5       	ldi	r24, 0x53	; 83
 17c:	80 93 6e 01 	sts	0x016E, r24
  txbuffer[i]='0'+CurrentPosition/100; i++;
 180:	90 91 01 01 	lds	r25, 0x0101
 184:	29 e2       	ldi	r18, 0x29	; 41
 186:	92 9f       	mul	r25, r18
 188:	21 2d       	mov	r18, r1
 18a:	11 24       	eor	r1, r1
 18c:	22 95       	swap	r18
 18e:	2f 70       	andi	r18, 0x0F	; 15
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	82 0f       	add	r24, r18
 194:	80 93 6f 01 	sts	0x016F, r24
  txbuffer[i]='0'+(CurrentPosition/10)%10; i++;
 198:	3d ec       	ldi	r19, 0xCD	; 205
 19a:	93 9f       	mul	r25, r19
 19c:	81 2d       	mov	r24, r1
 19e:	11 24       	eor	r1, r1
 1a0:	86 95       	lsr	r24
 1a2:	86 95       	lsr	r24
 1a4:	86 95       	lsr	r24
 1a6:	83 9f       	mul	r24, r19
 1a8:	31 2d       	mov	r19, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	36 95       	lsr	r19
 1ae:	36 95       	lsr	r19
 1b0:	36 95       	lsr	r19
 1b2:	4a e0       	ldi	r20, 0x0A	; 10
 1b4:	34 9f       	mul	r19, r20
 1b6:	80 19       	sub	r24, r0
 1b8:	11 24       	eor	r1, r1
 1ba:	80 5d       	subi	r24, 0xD0	; 208
 1bc:	80 93 70 01 	sts	0x0170, r24
  txbuffer[i]='0'+CurrentPosition%100; i++;
 1c0:	84 e6       	ldi	r24, 0x64	; 100
 1c2:	28 9f       	mul	r18, r24
 1c4:	90 19       	sub	r25, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	90 5d       	subi	r25, 0xD0	; 208
 1ca:	90 93 71 01 	sts	0x0171, r25
  txbuffer[i]='\n'; i++;
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	80 93 72 01 	sts	0x0172, r24
  txbuffer[i]=0;
 1d4:	10 92 73 01 	sts	0x0173, r1
  return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <DoReset>:

// Handler function for RESET command

signed char DoReset(void) {
  FSM_State=0; // Silently resets the Finite-State machine
 1dc:	10 92 02 01 	sts	0x0102, r1
  return 0;
}
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret

000001e4 <SetDeviceID>:
void SetDeviceID(void) {
  /*
    This function should be called before all others to initialize
    device_id pointer.
   */
  device_id[0] ='D';
 1e4:	e3 e3       	ldi	r30, 0x33	; 51
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	84 e4       	ldi	r24, 0x44	; 68
 1ea:	80 83       	st	Z, r24
  device_id[1] ='E';
 1ec:	85 e4       	ldi	r24, 0x45	; 69
 1ee:	81 83       	std	Z+1, r24	; 0x01
  device_id[2] ='V';
 1f0:	86 e5       	ldi	r24, 0x56	; 86
 1f2:	82 83       	std	Z+2, r24	; 0x02
  device_id[3] ='0'+(ADDR>>28)%0x10;
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	83 83       	std	Z+3, r24	; 0x03
  device_id[4] ='0'+(ADDR>>24)%0x10;
 1f8:	91 e3       	ldi	r25, 0x31	; 49
 1fa:	94 83       	std	Z+4, r25	; 0x04
  device_id[5] ='0'+(ADDR>>20)%0x10;
 1fc:	85 83       	std	Z+5, r24	; 0x05
  device_id[6] ='0'+(ADDR>>16)%0x10;
 1fe:	86 83       	std	Z+6, r24	; 0x06
  device_id[7] ='0'+(ADDR>>12)%0x10;
 200:	87 83       	std	Z+7, r24	; 0x07
  device_id[8] ='0'+(ADDR>>8)%0x10;
 202:	80 87       	std	Z+8, r24	; 0x08
  device_id[9] ='0'+(ADDR>>4)%0x10;
 204:	81 87       	std	Z+9, r24	; 0x09
  device_id[10]='0'+ADDR%0x10;
 206:	92 87       	std	Z+10, r25	; 0x0a
  device_id[11]=0;
 208:	13 86       	std	Z+11, r1	; 0x0b
 20a:	08 95       	ret

0000020c <IsTransmissionToOurs>:
}

signed char IsTransmissionToOurs(void) {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
    buffer to simplify further parsing. If no, buffer gets cleared
    out.
   */
  unsigned char i;
  
  if(strncasecmp(buffer,device_id,INIT_LEN)) {
 210:	4b e0       	ldi	r20, 0x0B	; 11
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	63 e3       	ldi	r22, 0x33	; 51
 216:	71 e0       	ldi	r23, 0x01	; 1
 218:	8f e3       	ldi	r24, 0x3F	; 63
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strncasecmp>
 220:	ec 01       	movw	r28, r24
 222:	89 2b       	or	r24, r25
 224:	41 f0       	breq	.+16     	; 0x236 <IsTransmissionToOurs+0x2a>
    buffer[0]=0;
 226:	10 92 3f 01 	sts	0x013F, r1
    buffer_cur_len=0;
 22a:	10 92 05 01 	sts	0x0105, r1
    return 0;
 22e:	80 e0       	ldi	r24, 0x00	; 0
  for(i=0;i<buffer_cur_len-INIT_LEN;i++)
    buffer[i]=buffer[i+INIT_LEN];
  buffer[i]=0;
  buffer_cur_len=i;
  return -1;
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret
    buffer[0]=0;
    buffer_cur_len=0;
    return 0;
  }

  buffer_cur_len=strnlen(buffer,BUFFER_LEN); // can be commented out due to program logic
 236:	60 e2       	ldi	r22, 0x20	; 32
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	8f e3       	ldi	r24, 0x3F	; 63
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 02 05 	call	0xa04	; 0xa04 <strnlen>
  for(i=0;i<buffer_cur_len-INIT_LEN;i++)
 242:	ac 01       	movw	r20, r24
 244:	55 27       	eor	r21, r21
 246:	4b 50       	subi	r20, 0x0B	; 11
 248:	51 09       	sbc	r21, r1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	14 16       	cp	r1, r20
 24e:	15 06       	cpc	r1, r21
 250:	54 f4       	brge	.+20     	; 0x266 <IsTransmissionToOurs+0x5a>
    buffer[i]=buffer[i+INIT_LEN];
 252:	c1 5c       	subi	r28, 0xC1	; 193
 254:	de 4f       	sbci	r29, 0xFE	; 254
 256:	2b 85       	ldd	r18, Y+11	; 0x0b
 258:	28 83       	st	Y, r18
    buffer_cur_len=0;
    return 0;
  }

  buffer_cur_len=strnlen(buffer,BUFFER_LEN); // can be commented out due to program logic
  for(i=0;i<buffer_cur_len-INIT_LEN;i++)
 25a:	9f 5f       	subi	r25, 0xFF	; 255
 25c:	c9 2f       	mov	r28, r25
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	c4 17       	cp	r28, r20
 262:	d5 07       	cpc	r29, r21
 264:	b4 f3       	brlt	.-20     	; 0x252 <IsTransmissionToOurs+0x46>
    buffer[i]=buffer[i+INIT_LEN];
  buffer[i]=0;
 266:	c1 5c       	subi	r28, 0xC1	; 193
 268:	de 4f       	sbci	r29, 0xFE	; 254
 26a:	18 82       	st	Y, r1
  buffer_cur_len=i;
 26c:	90 93 05 01 	sts	0x0105, r25
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	de cf       	rjmp	.-68     	; 0x230 <IsTransmissionToOurs+0x24>

00000274 <Parser>:
  return -1;
}

THandler Parser(void) {
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	e8 2e       	mov	r14, r24
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	f8 2e       	mov	r15, r24
 288:	00 e0       	ldi	r16, 0x00	; 0
 28a:	10 e0       	ldi	r17, 0x00	; 0
    our device.
  */
  unsigned char i,j;

  for(j=0;j<NUM_PARSER_FUNCTIONS;j++) {
    if(strncasecmp(buffer,ParserFunctions[j].name,ParserFunctions[j].name_len)==0) {
 28c:	f7 01       	movw	r30, r14
 28e:	c1 91       	ld	r28, Z+
 290:	bf 01       	movw	r22, r30
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	ae 01       	movw	r20, r28
 296:	8f e3       	ldi	r24, 0x3F	; 63
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <strncasecmp>
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	89 f0       	breq	.+34     	; 0x2c4 <Parser+0x50>
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	fb e0       	ldi	r31, 0x0B	; 11
 2a8:	ef 0e       	add	r14, r31
 2aa:	f1 1c       	adc	r15, r1
    This function should be called if transmitted text is addressed to
    our device.
  */
  unsigned char i,j;

  for(j=0;j<NUM_PARSER_FUNCTIONS;j++) {
 2ac:	04 30       	cpi	r16, 0x04	; 4
 2ae:	11 05       	cpc	r17, r1
 2b0:	69 f7       	brne	.-38     	; 0x28c <Parser+0x18>
      buffer[i]=0;
      buffer_cur_len=i;
      return ParserFunctions[j].handler;
    }
  }
  return NULL;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	08 95       	ret
  */
  unsigned char i,j;

  for(j=0;j<NUM_PARSER_FUNCTIONS;j++) {
    if(strncasecmp(buffer,ParserFunctions[j].name,ParserFunctions[j].name_len)==0) {
      for(i=0;i<buffer_cur_len-ParserFunctions[j].name_len;i++)
 2c4:	40 91 05 01 	lds	r20, 0x0105
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	4c 1b       	sub	r20, r28
 2cc:	5d 0b       	sbc	r21, r29
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	14 16       	cp	r1, r20
 2d2:	15 06       	cpc	r1, r21
 2d4:	74 f4       	brge	.+28     	; 0x2f2 <Parser+0x7e>
	buffer[i]=buffer[i+ParserFunctions[j].name_len];
 2d6:	dc 01       	movw	r26, r24
 2d8:	a1 5c       	subi	r26, 0xC1	; 193
 2da:	be 4f       	sbci	r27, 0xFE	; 254
 2dc:	fd 01       	movw	r30, r26
 2de:	ec 0f       	add	r30, r28
 2e0:	fd 1f       	adc	r31, r29
 2e2:	30 81       	ld	r19, Z
 2e4:	3c 93       	st	X, r19
  */
  unsigned char i,j;

  for(j=0;j<NUM_PARSER_FUNCTIONS;j++) {
    if(strncasecmp(buffer,ParserFunctions[j].name,ParserFunctions[j].name_len)==0) {
      for(i=0;i<buffer_cur_len-ParserFunctions[j].name_len;i++)
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	82 2f       	mov	r24, r18
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	84 17       	cp	r24, r20
 2ee:	95 07       	cpc	r25, r21
 2f0:	94 f3       	brlt	.-28     	; 0x2d6 <Parser+0x62>
	buffer[i]=buffer[i+ParserFunctions[j].name_len];
      buffer[i]=0;
 2f2:	fc 01       	movw	r30, r24
 2f4:	e1 5c       	subi	r30, 0xC1	; 193
 2f6:	fe 4f       	sbci	r31, 0xFE	; 254
 2f8:	10 82       	st	Z, r1
      buffer_cur_len=i;
 2fa:	20 93 05 01 	sts	0x0105, r18
      return ParserFunctions[j].handler;
 2fe:	8b e0       	ldi	r24, 0x0B	; 11
 300:	80 9f       	mul	r24, r16
 302:	f0 01       	movw	r30, r0
 304:	81 9f       	mul	r24, r17
 306:	f0 0d       	add	r31, r0
 308:	11 24       	eor	r1, r1
 30a:	ea 5f       	subi	r30, 0xFA	; 250
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	81 85       	ldd	r24, Z+9	; 0x09
 310:	92 85       	ldd	r25, Z+10	; 0x0a
    }
  }
  return NULL;
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	0f 91       	pop	r16
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	08 95       	ret

00000320 <CopyFromRXtoParser>:
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 320:	90 91 04 01 	lds	r25, 0x0104
 324:	99 23       	and	r25, r25
 326:	c1 f0       	breq	.+48     	; 0x358 <CopyFromRXtoParser+0x38>
 328:	e1 e8       	ldi	r30, 0x81	; 129
 32a:	f1 e0       	ldi	r31, 0x01	; 1
 32c:	af e3       	ldi	r26, 0x3F	; 63
 32e:	b1 e0       	ldi	r27, 0x01	; 1
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	29 0f       	add	r18, r25
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	2e 57       	subi	r18, 0x7E	; 126
 338:	3e 4f       	sbci	r19, 0xFE	; 254
    buffer[i]=rxbuffer[i];
 33a:	81 91       	ld	r24, Z+
 33c:	8d 93       	st	X+, r24
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 33e:	e2 17       	cp	r30, r18
 340:	f3 07       	cpc	r31, r19
 342:	d9 f7       	brne	.-10     	; 0x33a <CopyFromRXtoParser+0x1a>
    buffer[i]=rxbuffer[i];
  }
  if(i<BUFFER_LEN)
 344:	90 32       	cpi	r25, 0x20	; 32
 346:	28 f4       	brcc	.+10     	; 0x352 <CopyFromRXtoParser+0x32>
 348:	e9 2f       	mov	r30, r25
 34a:	f0 e0       	ldi	r31, 0x00	; 0
    buffer[i]=0;
 34c:	e1 5c       	subi	r30, 0xC1	; 193
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	10 82       	st	Z, r1
  rxbuffer_cur_len=0;
 352:	10 92 04 01 	sts	0x0104, r1
 356:	08 95       	ret
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 358:	e0 e0       	ldi	r30, 0x00	; 0
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	f7 cf       	rjmp	.-18     	; 0x34c <CopyFromRXtoParser+0x2c>

0000035e <uart_init>:

#include "../lib/functions.c"

// UART initialization function.
void uart_init(void) {
  DDRD  |= 0b10000000; // PD7 pin is connected to RE/DE pins of MAX485
 35e:	57 9a       	sbi	0x0a, 7	; 10
  PORTD &= 0b01111111; // It should be set to 0 until we really transmitting someting out
 360:	5f 98       	cbi	0x0b, 7	; 11

  UBRR0H = UBRRH_VALUE;
 362:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 366:	8f e1       	ldi	r24, 0x1F	; 31
 368:	80 93 c4 00 	sts	0x00C4, r24

#if USE_2X
  UCSR0A |= _BV(U2X0);
#else
  UCSR0A &= ~(_BV(U2X0));
 36c:	e0 ec       	ldi	r30, 0xC0	; 192
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	80 83       	st	Z, r24
#endif

  UCSR0A |= _BV(RXCIE0); // Enable interrupt-driven recieve.
 376:	80 81       	ld	r24, Z
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	80 83       	st	Z, r24

  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00) | _BV(UPM01); /* 8-bit data, parity: even */
 37c:	86 e2       	ldi	r24, 0x26	; 38
 37e:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 382:	88 e1       	ldi	r24, 0x18	; 24
 384:	80 93 c1 00 	sts	0x00C1, r24
 388:	08 95       	ret

0000038a <uart_transmit>:

// Function that transmits txbuffer through UART
void uart_transmit(void) {
  unsigned char i=0;
  // Here we need to put PD7 pin to 1 to turn MAX485 into transmitter mode
  PORTD |= 0b10000000;
 38a:	5f 9a       	sbi	0x0b, 7	; 11
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
}

// Function that transmits txbuffer through UART
void uart_transmit(void) {
  unsigned char i=0;
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
  // Here we need to put PD7 pin to 1 to turn MAX485 into transmitter mode
  PORTD |= 0b10000000;
  // The transmission itself
  do {
    while // Wait for empty transmit buffer
      ( !( UCSR0A & (1<<UDRE0)) );
 392:	80 91 c0 00 	lds	r24, 0x00C0
 396:	85 ff       	sbrs	r24, 5
 398:	fc cf       	rjmp	.-8      	; 0x392 <uart_transmit+0x8>
    UDR0 = txbuffer[i];
 39a:	f9 01       	movw	r30, r18
 39c:	ef 59       	subi	r30, 0x9F	; 159
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 81       	ld	r24, Z
 3a2:	80 93 c6 00 	sts	0x00C6, r24
    i++;
 3a6:	9f 5f       	subi	r25, 0xFF	; 255
  } while(txbuffer[i-1]!='\n');
 3a8:	29 2f       	mov	r18, r25
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	f9 01       	movw	r30, r18
 3ae:	e0 5a       	subi	r30, 0xA0	; 160
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	80 81       	ld	r24, Z
 3b4:	8a 30       	cpi	r24, 0x0A	; 10
 3b6:	69 f7       	brne	.-38     	; 0x392 <uart_transmit+0x8>
  // Making all things back
  PORTD &= 0b01111111;
 3b8:	5f 98       	cbi	0x0b, 7	; 11
 3ba:	08 95       	ret

000003bc <__vector_18>:
}

// Recieving function is an interrupt handler
ISR(USART_RX_vect, ISR_BLOCK)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
  rxbuffer[rxbuffer_cur_len]=UDR0;
 3ce:	80 91 04 01 	lds	r24, 0x0104
 3d2:	90 91 c6 00 	lds	r25, 0x00C6
 3d6:	e8 2f       	mov	r30, r24
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ef 57       	subi	r30, 0x7F	; 127
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	90 83       	st	Z, r25
  if(rxbuffer[rxbuffer_cur_len]=='\n')    
 3e0:	9a 30       	cpi	r25, 0x0A	; 10
 3e2:	19 f4       	brne	.+6      	; 0x3ea <__vector_18+0x2e>
    transmission_ready_flag=0xFF;
 3e4:	9f ef       	ldi	r25, 0xFF	; 255
 3e6:	90 93 03 01 	sts	0x0103, r25
  rxbuffer_cur_len++;
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	80 93 04 01 	sts	0x0104, r24
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <main>:

void main(void) {
  short int i;
  THandler hndl;

  ParserFunctions[0].name_len=2;
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	80 93 06 01 	sts	0x0106, r24
  ParserFunctions[0].name[0]='A';
 408:	81 e4       	ldi	r24, 0x41	; 65
 40a:	80 93 07 01 	sts	0x0107, r24
  ParserFunctions[0].name[1]='T';
 40e:	94 e5       	ldi	r25, 0x54	; 84
 410:	90 93 08 01 	sts	0x0108, r25
  ParserFunctions[0].name[2]=0;
 414:	10 92 09 01 	sts	0x0109, r1
  ParserFunctions[0].handler=DoAttention;
 418:	28 e4       	ldi	r18, 0x48	; 72
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	30 93 10 01 	sts	0x0110, r19
 420:	20 93 0f 01 	sts	0x010F, r18

  ParserFunctions[1].name_len=3;
 424:	33 e0       	ldi	r19, 0x03	; 3
 426:	30 93 11 01 	sts	0x0111, r19
  ParserFunctions[1].name[0]='S';
 42a:	23 e5       	ldi	r18, 0x53	; 83
 42c:	20 93 12 01 	sts	0x0112, r18
  ParserFunctions[1].name[1]='E';
 430:	85 e4       	ldi	r24, 0x45	; 69
 432:	80 93 13 01 	sts	0x0113, r24
  ParserFunctions[1].name[2]='T';
 436:	90 93 14 01 	sts	0x0114, r25
  ParserFunctions[1].name[3]=0;
 43a:	10 92 15 01 	sts	0x0115, r1
  ParserFunctions[1].handler=DoSet;
 43e:	40 e6       	ldi	r20, 0x60	; 96
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	50 93 1b 01 	sts	0x011B, r21
 446:	40 93 1a 01 	sts	0x011A, r20
  
  ParserFunctions[2].name_len=3;
 44a:	30 93 1c 01 	sts	0x011C, r19
  ParserFunctions[2].name[0]='G';
 44e:	37 e4       	ldi	r19, 0x47	; 71
 450:	30 93 1d 01 	sts	0x011D, r19
  ParserFunctions[2].name[1]='E';
 454:	80 93 1e 01 	sts	0x011E, r24
  ParserFunctions[2].name[2]='T';
 458:	90 93 1f 01 	sts	0x011F, r25
  ParserFunctions[2].name[3]=0;
 45c:	10 92 20 01 	sts	0x0120, r1
  ParserFunctions[2].handler=DoGet;
 460:	4c ea       	ldi	r20, 0xAC	; 172
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	50 93 26 01 	sts	0x0126, r21
 468:	40 93 25 01 	sts	0x0125, r20

  ParserFunctions[3].name_len=5;
 46c:	35 e0       	ldi	r19, 0x05	; 5
 46e:	30 93 27 01 	sts	0x0127, r19
  ParserFunctions[3].name[0]='R';
 472:	32 e5       	ldi	r19, 0x52	; 82
 474:	30 93 28 01 	sts	0x0128, r19
  ParserFunctions[3].name[1]='E';
 478:	80 93 29 01 	sts	0x0129, r24
  ParserFunctions[3].name[2]='S';
 47c:	20 93 2a 01 	sts	0x012A, r18
  ParserFunctions[3].name[3]='E';
 480:	80 93 2b 01 	sts	0x012B, r24
  ParserFunctions[3].name[4]='T';
 484:	90 93 2c 01 	sts	0x012C, r25
  ParserFunctions[3].name[5]=0;
 488:	10 92 2d 01 	sts	0x012D, r1
  ParserFunctions[3].handler=DoReset;
 48c:	2e ee       	ldi	r18, 0xEE	; 238
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	30 93 31 01 	sts	0x0131, r19
 494:	20 93 30 01 	sts	0x0130, r18
void SetDeviceID(void) {
  /*
    This function should be called before all others to initialize
    device_id pointer.
   */
  device_id[0] ='D';
 498:	94 e4       	ldi	r25, 0x44	; 68
 49a:	90 93 33 01 	sts	0x0133, r25
  device_id[1] ='E';
 49e:	80 93 34 01 	sts	0x0134, r24
  device_id[2] ='V';
 4a2:	86 e5       	ldi	r24, 0x56	; 86
 4a4:	80 93 35 01 	sts	0x0135, r24
  device_id[3] ='0'+(ADDR>>28)%0x10;
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	80 93 36 01 	sts	0x0136, r24
  device_id[4] ='0'+(ADDR>>24)%0x10;
 4ae:	91 e3       	ldi	r25, 0x31	; 49
 4b0:	90 93 37 01 	sts	0x0137, r25
  device_id[5] ='0'+(ADDR>>20)%0x10;
 4b4:	80 93 38 01 	sts	0x0138, r24
  device_id[6] ='0'+(ADDR>>16)%0x10;
 4b8:	80 93 39 01 	sts	0x0139, r24
  device_id[7] ='0'+(ADDR>>12)%0x10;
 4bc:	80 93 3a 01 	sts	0x013A, r24
  device_id[8] ='0'+(ADDR>>8)%0x10;
 4c0:	80 93 3b 01 	sts	0x013B, r24
  device_id[9] ='0'+(ADDR>>4)%0x10;
 4c4:	80 93 3c 01 	sts	0x013C, r24
  device_id[10]='0'+ADDR%0x10;
 4c8:	90 93 3d 01 	sts	0x013D, r25
  device_id[11]=0;
 4cc:	10 92 3e 01 	sts	0x013E, r1
 4d0:	80 91 02 01 	lds	r24, 0x0102
	  PORTB |= 0b00000010;
	  
	  for(;MovementTimeCurrent<=MovementTimeFull;MovementTimeCurrent++)
	    {
	      _delay_ms(10);
	      CurrentPosition=(int)MovementTimeCurrent/MovementTimeFull*100;
 4d4:	94 e6       	ldi	r25, 0x64	; 100
 4d6:	69 2e       	mov	r6, r25
 4d8:	24 e6       	ldi	r18, 0x64	; 100
 4da:	e2 2e       	mov	r14, r18
 4dc:	ce e3       	ldi	r28, 0x3E	; 62
 4de:	d1 e0       	ldi	r29, 0x01	; 1
	    command. We need to report back that we are finished.
	  */
	case 4:
	  for(i=0;i<INIT_LEN;i++)
	    txbuffer[i]=device_id[i];
	  txbuffer[i]='O';  i++;
 4e0:	3f e4       	ldi	r19, 0x4F	; 79
 4e2:	f3 2e       	mov	r15, r19
	  txbuffer[i]='K';  i++;
 4e4:	4b e4       	ldi	r20, 0x4B	; 75
 4e6:	b4 2e       	mov	r11, r20
	  txbuffer[i]='\n'; i++;
 4e8:	5a e0       	ldi	r21, 0x0A	; 10
 4ea:	d5 2e       	mov	r13, r21
	  txbuffer[i]=0;
	  uart_transmit();
	  FSM_State=1;
 4ec:	11 e0       	ldi	r17, 0x01	; 1
	    power on. It is also possible to get here using RESET command.
	  */
	case 0: // Initialize system
	  uart_init();

	  DDRB=0b00000011;
 4ee:	03 e0       	ldi	r16, 0x03	; 3
	  DDRD=0b10000011;
 4f0:	63 e8       	ldi	r22, 0x83	; 131
 4f2:	c6 2e       	mov	r12, r22

	  // Finally if somethig happened then DeiredPosition != CurrentPosition
	  if(DesiredPosition<CurrentPosition) // This will also happen
					      // after initial
					      // movements
	    FSM_State=2;
 4f4:	72 e0       	ldi	r23, 0x02	; 2
 4f6:	a7 2e       	mov	r10, r23
		      if (hndl()) // Called function returned error
			{ 
			  // report error
			  for(i=0;i<INIT_LEN;i++)
			    txbuffer[i]=device_id[i];
			  txbuffer[i]='E';  i++;
 4f8:	e5 e4       	ldi	r30, 0x45	; 69
 4fa:	7e 2e       	mov	r7, r30
			  txbuffer[i]='R';  i++;
 4fc:	f2 e5       	ldi	r31, 0x52	; 82
 4fe:	9f 2e       	mov	r9, r31
		      txbuffer[i]='E';  i++;
		      txbuffer[i]='R';  i++;
		      txbuffer[i]='R';  i++;
		      txbuffer[i]='O';  i++;
		      txbuffer[i]='R';  i++;
		      txbuffer[i]='_';  i++;
 500:	af e5       	ldi	r26, 0x5F	; 95
 502:	8a 2e       	mov	r8, r26
  SetDeviceID();

  // Infinite main loop
  for(;;)
    {
      switch(FSM_State)
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	09 f4       	brne	.+2      	; 0x50a <main+0x108>
 508:	ef c0       	rjmp	.+478    	; 0x6e8 <main+0x2e6>
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	08 f0       	brcs	.+2      	; 0x510 <main+0x10e>
 50e:	e3 c0       	rjmp	.+454    	; 0x6d6 <main+0x2d4>
 510:	88 23       	and	r24, r24
 512:	09 f4       	brne	.+2      	; 0x516 <main+0x114>
 514:	34 c1       	rjmp	.+616    	; 0x77e <main+0x37c>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	a9 f7       	brne	.-22     	; 0x504 <main+0x102>
	  /*
	    Here we wait for any event possible - button press or command
	    received via UART.
	  */
	case 1: // Wait for event case
	  if((PIND & 0b0100) == 0) // UP switch
 51a:	4a 9b       	sbis	0x09, 2	; 9
 51c:	b7 c0       	rjmp	.+366    	; 0x68c <main+0x28a>
	    {
	      _delay_ms(50);
	      if((PIND & 0b0100) == 0) // still pressed
		DesiredPosition=0;
	    }
	  if((PIND & 0b1000) == 0) // DOWN switch
 51e:	4b 9b       	sbis	0x09, 3	; 9
 520:	bf c0       	rjmp	.+382    	; 0x6a0 <main+0x29e>
	      if((PIND & 0b1000) == 0)
		  DesiredPosition=100;
	    }

	  // Now let's check our command buffer
      	  if(transmission_ready_flag)
 522:	80 91 03 01 	lds	r24, 0x0103
 526:	88 23       	and	r24, r24
 528:	f1 f0       	breq	.+60     	; 0x566 <main+0x164>
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 52a:	30 91 04 01 	lds	r19, 0x0104
 52e:	33 23       	and	r19, r19
 530:	09 f4       	brne	.+2      	; 0x534 <main+0x132>
 532:	25 c2       	rjmp	.+1098   	; 0x97e <__stack+0x7f>
 534:	e1 e8       	ldi	r30, 0x81	; 129
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	af e3       	ldi	r26, 0x3F	; 63
 53a:	b1 e0       	ldi	r27, 0x01	; 1
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	83 0f       	add	r24, r19
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	8e 57       	subi	r24, 0x7E	; 126
 544:	9e 4f       	sbci	r25, 0xFE	; 254
    buffer[i]=rxbuffer[i];
 546:	21 91       	ld	r18, Z+
 548:	2d 93       	st	X+, r18
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 54a:	8e 17       	cp	r24, r30
 54c:	9f 07       	cpc	r25, r31
 54e:	d9 f7       	brne	.-10     	; 0x546 <main+0x144>
    buffer[i]=rxbuffer[i];
  }
  if(i<BUFFER_LEN)
 550:	30 32       	cpi	r19, 0x20	; 32
 552:	08 f4       	brcc	.+2      	; 0x556 <main+0x154>
 554:	a1 c1       	rjmp	.+834    	; 0x898 <main+0x496>
    buffer[i]=0;
  rxbuffer_cur_len=0;
 556:	10 92 04 01 	sts	0x0104, r1
	    {
	      CopyFromRXtoParser();
	      transmission_ready_flag=0;
 55a:	10 92 03 01 	sts	0x0103, r1
	      // Check if command in buffer is for us
	      if(IsTransmissionToOurs())
 55e:	0e 94 06 01 	call	0x20c	; 0x20c <IsTransmissionToOurs>
 562:	81 11       	cpse	r24, r1
 564:	a7 c1       	rjmp	.+846    	; 0x8b4 <main+0x4b2>
		    }
		}
	    }

	  // Finally if somethig happened then DeiredPosition != CurrentPosition
	  if(DesiredPosition<CurrentPosition) // This will also happen
 566:	90 91 00 01 	lds	r25, 0x0100
 56a:	80 91 01 01 	lds	r24, 0x0101
 56e:	98 17       	cp	r25, r24
 570:	10 f4       	brcc	.+4      	; 0x576 <main+0x174>
					      // after initial
					      // movements
	    FSM_State=2;
 572:	a0 92 02 01 	sts	0x0102, r10
	  if(DesiredPosition>CurrentPosition)
 576:	89 17       	cp	r24, r25
 578:	08 f0       	brcs	.+2      	; 0x57c <main+0x17a>
 57a:	84 c1       	rjmp	.+776    	; 0x884 <main+0x482>
	    FSM_State=3;      
 57c:	00 93 02 01 	sts	0x0102, r16
	  /*
	    The only thing we doing here is moving the blind down. The
	    only way to stop this is pressing any button.
	  */
	case 3: // Moving down
	  PORTB &= 0b11111110;
 580:	28 98       	cbi	0x05, 0	; 5
	  PORTB |= 0b00000010;
 582:	29 9a       	sbi	0x05, 1	; 5
	  
	  for(;MovementTimeCurrent<=MovementTimeFull;MovementTimeCurrent++)
 584:	20 91 5f 01 	lds	r18, 0x015F
 588:	30 91 60 01 	lds	r19, 0x0160
 58c:	80 91 a1 01 	lds	r24, 0x01A1
 590:	90 91 a2 01 	lds	r25, 0x01A2
 594:	82 17       	cp	r24, r18
 596:	93 07       	cpc	r25, r19
 598:	ac f4       	brge	.+42     	; 0x5c4 <main+0x1c2>
 59a:	3d c0       	rjmp	.+122    	; 0x616 <main+0x214>
		    {
		      MovementTimeCurrent=MovementTimeFull; // We reached the end
		      break;
		    }
		}
	      if((PIND & 0b1100) == 0) // UP or DOWN switch pressed
 59c:	89 b1       	in	r24, 0x09	; 9
 59e:	8c 70       	andi	r24, 0x0C	; 12
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <main+0x1a2>
 5a2:	87 c0       	rjmp	.+270    	; 0x6b2 <main+0x2b0>
 5a4:	80 91 5f 01 	lds	r24, 0x015F
 5a8:	90 91 60 01 	lds	r25, 0x0160
	  */
	case 3: // Moving down
	  PORTB &= 0b11111110;
	  PORTB |= 0b00000010;
	  
	  for(;MovementTimeCurrent<=MovementTimeFull;MovementTimeCurrent++)
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	90 93 60 01 	sts	0x0160, r25
 5b2:	80 93 5f 01 	sts	0x015F, r24
 5b6:	20 91 a1 01 	lds	r18, 0x01A1
 5ba:	30 91 a2 01 	lds	r19, 0x01A2
 5be:	28 17       	cp	r18, r24
 5c0:	39 07       	cpc	r19, r25
 5c2:	4c f1       	brlt	.+82     	; 0x616 <main+0x214>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	9f e2       	ldi	r25, 0x2F	; 47
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <main+0x1c6>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <main+0x1cc>
 5ce:	00 00       	nop
	    {
	      _delay_ms(10);
	      CurrentPosition=(int)MovementTimeCurrent/MovementTimeFull*100;
 5d0:	80 91 5f 01 	lds	r24, 0x015F
 5d4:	90 91 60 01 	lds	r25, 0x0160
 5d8:	60 91 a1 01 	lds	r22, 0x01A1
 5dc:	70 91 a2 01 	lds	r23, 0x01A2
 5e0:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
 5e4:	66 9d       	mul	r22, r6
 5e6:	60 2d       	mov	r22, r0
 5e8:	11 24       	eor	r1, r1
 5ea:	60 93 01 01 	sts	0x0101, r22
	      if(CurrentPosition == DesiredPosition)
 5ee:	80 91 00 01 	lds	r24, 0x0100
 5f2:	68 17       	cp	r22, r24
 5f4:	81 f0       	breq	.+32     	; 0x616 <main+0x214>
		break;
	      if((PIND & 0b00100000) == 0) // END2 switch reached
 5f6:	4d 99       	sbic	0x09, 5	; 9
 5f8:	d1 cf       	rjmp	.-94     	; 0x59c <main+0x19a>
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f0 ef       	ldi	r31, 0xF0	; 240
 5fe:	31 97       	sbiw	r30, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <main+0x1fc>
		{
		  _delay_ms(50);
		  if((PIND & 0b00100000) == 0) // still short
 602:	4d 99       	sbic	0x09, 5	; 9
 604:	cb cf       	rjmp	.-106    	; 0x59c <main+0x19a>
		    {
		      MovementTimeCurrent=MovementTimeFull; // We reached the end
 606:	80 91 a1 01 	lds	r24, 0x01A1
 60a:	90 91 a2 01 	lds	r25, 0x01A2
 60e:	90 93 60 01 	sts	0x0160, r25
 612:	80 93 5f 01 	sts	0x015F, r24
		  if((PIND & 0b1100) == 0) // ...still pressed
		    break;
		}
	    }

	  PORTB &= 0b11111100; // Switching motor off
 616:	85 b1       	in	r24, 0x05	; 5
 618:	8c 7f       	andi	r24, 0xFC	; 252
 61a:	85 b9       	out	0x05, r24	; 5

	  if(MovementTimeCurrent > MovementTimeFull)
 61c:	80 91 5f 01 	lds	r24, 0x015F
 620:	90 91 60 01 	lds	r25, 0x0160
 624:	60 91 a1 01 	lds	r22, 0x01A1
 628:	70 91 a2 01 	lds	r23, 0x01A2
 62c:	68 17       	cp	r22, r24
 62e:	79 07       	cpc	r23, r25
 630:	2c f4       	brge	.+10     	; 0x63c <main+0x23a>
	    MovementTimeCurrent = MovementTimeFull;
 632:	70 93 60 01 	sts	0x0160, r23
 636:	60 93 5f 01 	sts	0x015F, r22
 63a:	cb 01       	movw	r24, r22
				      // UP or DOWN switch 50 ms to
				      // upper position
	    MovementTimeCurrent=0;
	  // CurrentPosition needs to be corrected when we break'ed by
	  // first or second "if" statement:
	  CurrentPosition=(int)MovementTimeCurrent/MovementTimeFull*100; 
 63c:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
 640:	66 9d       	mul	r22, r6
 642:	60 2d       	mov	r22, r0
 644:	11 24       	eor	r1, r1
 646:	60 93 01 01 	sts	0x0101, r22
	  
	  DesiredPosition=CurrentPosition;
 64a:	60 93 00 01 	sts	0x0100, r22
	  if(ReportOkFlag)
 64e:	80 91 32 01 	lds	r24, 0x0132
 652:	88 23       	and	r24, r24
 654:	09 f4       	brne	.+2      	; 0x658 <main+0x256>
 656:	01 c1       	rjmp	.+514    	; 0x85a <main+0x458>
	    FSM_State=4;
 658:	84 e0       	ldi	r24, 0x04	; 4
 65a:	80 93 02 01 	sts	0x0102, r24
 65e:	e3 e3       	ldi	r30, 0x33	; 51
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	a1 e6       	ldi	r26, 0x61	; 97
 664:	b1 e0       	ldi	r27, 0x01	; 1
	    Special state that comes when movement was caused by UART
	    command. We need to report back that we are finished.
	  */
	case 4:
	  for(i=0;i<INIT_LEN;i++)
	    txbuffer[i]=device_id[i];
 666:	81 91       	ld	r24, Z+
 668:	8d 93       	st	X+, r24
	  /*
	    Special state that comes when movement was caused by UART
	    command. We need to report back that we are finished.
	  */
	case 4:
	  for(i=0;i<INIT_LEN;i++)
 66a:	ce 17       	cp	r28, r30
 66c:	df 07       	cpc	r29, r31
 66e:	d9 f7       	brne	.-10     	; 0x666 <main+0x264>
	    txbuffer[i]=device_id[i];
	  txbuffer[i]='O';  i++;
 670:	f0 92 6c 01 	sts	0x016C, r15
	  txbuffer[i]='K';  i++;
 674:	b0 92 6d 01 	sts	0x016D, r11
	  txbuffer[i]='\n'; i++;
 678:	d0 92 6e 01 	sts	0x016E, r13
	  txbuffer[i]=0;
 67c:	10 92 6f 01 	sts	0x016F, r1
	  uart_transmit();
 680:	0e 94 c5 01 	call	0x38a	; 0x38a <uart_transmit>
	  FSM_State=1;
 684:	10 93 02 01 	sts	0x0102, r17
	  /*
	    Here we wait for any event possible - button press or command
	    received via UART.
	  */
	case 1: // Wait for event case
	  if((PIND & 0b0100) == 0) // UP switch
 688:	4a 99       	sbic	0x09, 2	; 9
 68a:	49 cf       	rjmp	.-366    	; 0x51e <main+0x11c>
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 ef       	ldi	r25, 0xF0	; 240
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <main+0x28e>
	    {
	      _delay_ms(50);
	      if((PIND & 0b0100) == 0) // still pressed
 694:	4a 99       	sbic	0x09, 2	; 9
 696:	43 cf       	rjmp	.-378    	; 0x51e <main+0x11c>
		DesiredPosition=0;
 698:	10 92 00 01 	sts	0x0100, r1
	    }
	  if((PIND & 0b1000) == 0) // DOWN switch
 69c:	4b 99       	sbic	0x09, 3	; 9
 69e:	41 cf       	rjmp	.-382    	; 0x522 <main+0x120>
 6a0:	e0 e0       	ldi	r30, 0x00	; 0
 6a2:	f0 ef       	ldi	r31, 0xF0	; 240
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <main+0x2a2>
	    {
	      _delay_ms(50);
	      if((PIND & 0b1000) == 0)
 6a8:	4b 99       	sbic	0x09, 3	; 9
 6aa:	3b cf       	rjmp	.-394    	; 0x522 <main+0x120>
		  DesiredPosition=100;
 6ac:	e0 92 00 01 	sts	0x0100, r14
 6b0:	38 cf       	rjmp	.-400    	; 0x522 <main+0x120>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 ef       	ldi	r25, 0xF0	; 240
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <main+0x2b4>
		    }
		}
	      if((PIND & 0b1100) == 0) // UP or DOWN switch pressed
		{
		  _delay_ms(50);
		  MovementTimeCurrent+=5;
 6ba:	80 91 5f 01 	lds	r24, 0x015F
 6be:	90 91 60 01 	lds	r25, 0x0160
 6c2:	05 96       	adiw	r24, 0x05	; 5
 6c4:	90 93 60 01 	sts	0x0160, r25
 6c8:	80 93 5f 01 	sts	0x015F, r24
		  if((PIND & 0b1100) == 0) // ...still pressed
 6cc:	29 b1       	in	r18, 0x09	; 9
 6ce:	2c 70       	andi	r18, 0x0C	; 12
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0x2d2>
 6d2:	6c cf       	rjmp	.-296    	; 0x5ac <main+0x1aa>
 6d4:	a0 cf       	rjmp	.-192    	; 0x616 <main+0x214>
  SetDeviceID();

  // Infinite main loop
  for(;;)
    {
      switch(FSM_State)
 6d6:	83 30       	cpi	r24, 0x03	; 3
 6d8:	09 f4       	brne	.+2      	; 0x6dc <main+0x2da>
 6da:	52 cf       	rjmp	.-348    	; 0x580 <main+0x17e>
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	09 f4       	brne	.+2      	; 0x6e2 <main+0x2e0>
 6e0:	be cf       	rjmp	.-132    	; 0x65e <main+0x25c>
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <main+0x2e6>
 6e6:	11 cf       	rjmp	.-478    	; 0x50a <main+0x108>
	  /*
	    The only thing we doing here is moving the blind up. The only
	    way to stop this is pressing any button.
	  */
	case 2: // Moving up
	  PORTB |= 0b00000001;
 6e8:	28 9a       	sbi	0x05, 0	; 5
	  PORTB &= 0b11111101;
 6ea:	29 98       	cbi	0x05, 1	; 5
	  
	  for(;MovementTimeCurrent>=0;MovementTimeCurrent--)
 6ec:	80 91 5f 01 	lds	r24, 0x015F
 6f0:	90 91 60 01 	lds	r25, 0x0160
 6f4:	97 fd       	sbrc	r25, 7
 6f6:	35 c0       	rjmp	.+106    	; 0x762 <main+0x360>
 6f8:	0f c0       	rjmp	.+30     	; 0x718 <main+0x316>
		    {
		      MovementTimeCurrent=0; // We reached the beginning
		      break;
		    }
		}
	      if((PIND & 0b1100) == 0) // UP or DOWN switch pressed
 6fa:	89 b1       	in	r24, 0x09	; 9
 6fc:	8c 70       	andi	r24, 0x0C	; 12
 6fe:	09 f4       	brne	.+2      	; 0x702 <main+0x300>
 700:	af c0       	rjmp	.+350    	; 0x860 <main+0x45e>
 702:	80 91 5f 01 	lds	r24, 0x015F
 706:	90 91 60 01 	lds	r25, 0x0160
	  */
	case 2: // Moving up
	  PORTB |= 0b00000001;
	  PORTB &= 0b11111101;
	  
	  for(;MovementTimeCurrent>=0;MovementTimeCurrent--)
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	90 93 60 01 	sts	0x0160, r25
 710:	80 93 5f 01 	sts	0x015F, r24
 714:	97 fd       	sbrc	r25, 7
 716:	25 c0       	rjmp	.+74     	; 0x762 <main+0x360>
 718:	ef ef       	ldi	r30, 0xFF	; 255
 71a:	ff e2       	ldi	r31, 0x2F	; 47
 71c:	31 97       	sbiw	r30, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <main+0x31a>
 720:	00 c0       	rjmp	.+0      	; 0x722 <main+0x320>
 722:	00 00       	nop
	    {
	      _delay_ms(10);
	      CurrentPosition=(int)MovementTimeCurrent/MovementTimeFull*100;
 724:	80 91 5f 01 	lds	r24, 0x015F
 728:	90 91 60 01 	lds	r25, 0x0160
 72c:	60 91 a1 01 	lds	r22, 0x01A1
 730:	70 91 a2 01 	lds	r23, 0x01A2
 734:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
 738:	66 9d       	mul	r22, r6
 73a:	60 2d       	mov	r22, r0
 73c:	11 24       	eor	r1, r1
 73e:	60 93 01 01 	sts	0x0101, r22
	      if(CurrentPosition == DesiredPosition)
 742:	80 91 00 01 	lds	r24, 0x0100
 746:	68 17       	cp	r22, r24
 748:	61 f0       	breq	.+24     	; 0x762 <main+0x360>
		break;
	      if((PIND & 0b00010000) == 0) // END1 switch reached
 74a:	4c 99       	sbic	0x09, 4	; 9
 74c:	d6 cf       	rjmp	.-84     	; 0x6fa <main+0x2f8>
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	90 ef       	ldi	r25, 0xF0	; 240
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	f1 f7       	brne	.-4      	; 0x752 <main+0x350>
		{
		  _delay_ms(50);
		  if((PIND & 0b00010000) == 0) // still short
 756:	4c 99       	sbic	0x09, 4	; 9
 758:	d0 cf       	rjmp	.-96     	; 0x6fa <main+0x2f8>
		    {
		      MovementTimeCurrent=0; // We reached the beginning
 75a:	10 92 60 01 	sts	0x0160, r1
 75e:	10 92 5f 01 	sts	0x015F, r1
		  if((PIND & 0b1100) == 0) // ...still pressed
		    break;
		}
	    }

	  PORTB &= 0b11111100; // Switching motor off
 762:	85 b1       	in	r24, 0x05	; 5
 764:	8c 7f       	andi	r24, 0xFC	; 252
 766:	85 b9       	out	0x05, r24	; 5

	  if(MovementTimeCurrent < 0) // This can happen when we press
 768:	80 91 5f 01 	lds	r24, 0x015F
 76c:	90 91 60 01 	lds	r25, 0x0160
 770:	97 fd       	sbrc	r25, 7
 772:	8b c0       	rjmp	.+278    	; 0x88a <main+0x488>
				      // UP or DOWN switch 50 ms to
				      // upper position
	    MovementTimeCurrent=0;
	  // CurrentPosition needs to be corrected when we break'ed by
	  // first or second "if" statement:
	  CurrentPosition=(int)MovementTimeCurrent/MovementTimeFull*100; 
 774:	60 91 a1 01 	lds	r22, 0x01A1
 778:	70 91 a2 01 	lds	r23, 0x01A2
 77c:	5f cf       	rjmp	.-322    	; 0x63c <main+0x23a>
	  /*
	    Here we initialize our system. This state is default after
	    power on. It is also possible to get here using RESET command.
	  */
	case 0: // Initialize system
	  uart_init();
 77e:	0e 94 af 01 	call	0x35e	; 0x35e <uart_init>

	  DDRB=0b00000011;
 782:	04 b9       	out	0x04, r16	; 4
	  DDRD=0b10000011;
 784:	ca b8       	out	0x0a, r12	; 10
      
	  /*      set_input(DDRD, PD2); // DOWN button
		  set_input(DDRD, PD3); // UP button
		  set_input(DDRD, PD4); // END1 contact
		  set_input(DDRD, PD5); // END2 contact */
	  PORTD |= 0b00111100;  // Switching pull-up resistors on
 786:	8b b1       	in	r24, 0x0b	; 11
 788:	8c 63       	ori	r24, 0x3C	; 60
 78a:	8b b9       	out	0x0b, r24	; 11

	  // Switching motor on in forward direction
	  PORTB |= 0b00000001;
 78c:	28 9a       	sbi	0x05, 0	; 5
	  PORTB &= 0b11111101;
 78e:	29 98       	cbi	0x05, 1	; 5
	  
	  for(MovementTimeCurrent=0;;MovementTimeCurrent++)
 790:	10 92 60 01 	sts	0x0160, r1
 794:	10 92 5f 01 	sts	0x015F, r1
 798:	09 c0       	rjmp	.+18     	; 0x7ac <main+0x3aa>
 79a:	80 91 5f 01 	lds	r24, 0x015F
 79e:	90 91 60 01 	lds	r25, 0x0160
 7a2:	01 96       	adiw	r24, 0x01	; 1
 7a4:	90 93 60 01 	sts	0x0160, r25
 7a8:	80 93 5f 01 	sts	0x015F, r24
 7ac:	8f ef       	ldi	r24, 0xFF	; 255
 7ae:	9f e2       	ldi	r25, 0x2F	; 47
 7b0:	01 97       	sbiw	r24, 0x01	; 1
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <main+0x3ae>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x3b4>
 7b6:	00 00       	nop
	    {
	      _delay_ms(10);
	      if((PIND & 0b00010000) == 0) // END1 switch
 7b8:	4c 99       	sbic	0x09, 4	; 9
 7ba:	ef cf       	rjmp	.-34     	; 0x79a <main+0x398>
 7bc:	e0 e0       	ldi	r30, 0x00	; 0
 7be:	f0 ef       	ldi	r31, 0xF0	; 240
 7c0:	31 97       	sbiw	r30, 0x01	; 1
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <main+0x3be>
		{
		  _delay_ms(50);
		  MovementTimeCurrent+=5;
 7c4:	80 91 5f 01 	lds	r24, 0x015F
 7c8:	90 91 60 01 	lds	r25, 0x0160
 7cc:	05 96       	adiw	r24, 0x05	; 5
 7ce:	90 93 60 01 	sts	0x0160, r25
 7d2:	80 93 5f 01 	sts	0x015F, r24
		  if((PIND & 0b00010000) == 0)
 7d6:	4c 99       	sbic	0x09, 4	; 9
 7d8:	e4 cf       	rjmp	.-56     	; 0x7a2 <main+0x3a0>
		    break;
		}
	    }

	  // Switching motor on in backward direction:
	  PORTB &= 0b11111110;
 7da:	28 98       	cbi	0x05, 0	; 5
	  PORTB |= 0b00000010;
 7dc:	29 9a       	sbi	0x05, 1	; 5

	  for(MovementTimeFull=0;;MovementTimeFull++)
 7de:	10 92 a2 01 	sts	0x01A2, r1
 7e2:	10 92 a1 01 	sts	0x01A1, r1
 7e6:	09 c0       	rjmp	.+18     	; 0x7fa <main+0x3f8>
 7e8:	80 91 a1 01 	lds	r24, 0x01A1
 7ec:	90 91 a2 01 	lds	r25, 0x01A2
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	90 93 a2 01 	sts	0x01A2, r25
 7f6:	80 93 a1 01 	sts	0x01A1, r24
 7fa:	8f ef       	ldi	r24, 0xFF	; 255
 7fc:	9f e2       	ldi	r25, 0x2F	; 47
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	f1 f7       	brne	.-4      	; 0x7fe <main+0x3fc>
 802:	00 c0       	rjmp	.+0      	; 0x804 <main+0x402>
 804:	00 00       	nop
	    {
	      _delay_ms(10);
	      if((PIND & 0b00100000) == 0) // END2 switch
 806:	4d 99       	sbic	0x09, 5	; 9
 808:	ef cf       	rjmp	.-34     	; 0x7e8 <main+0x3e6>
 80a:	e0 e0       	ldi	r30, 0x00	; 0
 80c:	f0 ef       	ldi	r31, 0xF0	; 240
 80e:	31 97       	sbiw	r30, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <main+0x40c>
		{
		  _delay_ms(50);
		  MovementTimeFull+=5;
 812:	80 91 a1 01 	lds	r24, 0x01A1
 816:	90 91 a2 01 	lds	r25, 0x01A2
 81a:	05 96       	adiw	r24, 0x05	; 5
 81c:	90 93 a2 01 	sts	0x01A2, r25
 820:	80 93 a1 01 	sts	0x01A1, r24
		  if((PIND & 0b00100000) == 0)
 824:	4d 99       	sbic	0x09, 5	; 9
 826:	e4 cf       	rjmp	.-56     	; 0x7f0 <main+0x3ee>
		    break;
		}
	    }

	  // Switching motor off
	  PORTB &= 0b11111100;
 828:	85 b1       	in	r24, 0x05	; 5
 82a:	8c 7f       	andi	r24, 0xFC	; 252
 82c:	85 b9       	out	0x05, r24	; 5
	  // now MovementTimeCurrent contains number of 10 ms time
	  // cycles from starting posisiton to upper and
	  // MovementTimeFull contains number of 10 ms time cycles
	  // from one end to another. Here we set DesiredPosition
	  // because actual current position is "fully closed".
	  DesiredPosition=(int)MovementTimeCurrent/MovementTimeFull*100;
 82e:	80 91 5f 01 	lds	r24, 0x015F
 832:	90 91 60 01 	lds	r25, 0x0160
 836:	60 91 a1 01 	lds	r22, 0x01A1
 83a:	70 91 a2 01 	lds	r23, 0x01A2
 83e:	0e 94 c2 04 	call	0x984	; 0x984 <__divmodhi4>
 842:	66 9d       	mul	r22, r6
 844:	60 2d       	mov	r22, r0
 846:	11 24       	eor	r1, r1
 848:	60 93 00 01 	sts	0x0100, r22
	  CurrentPosition=100;
 84c:	e0 92 01 01 	sts	0x0101, r14

	  transmission_ready_flag=0;
 850:	10 92 03 01 	sts	0x0103, r1
	  ReportOkFlag=0;
 854:	10 92 32 01 	sts	0x0132, r1
	  sei(); // Enable interrupts globally
 858:	78 94       	sei
	  FSM_State=1; // Wait for event
 85a:	10 93 02 01 	sts	0x0102, r17
	  break;
 85e:	5d ce       	rjmp	.-838    	; 0x51a <main+0x118>
 860:	e0 e0       	ldi	r30, 0x00	; 0
 862:	f0 ef       	ldi	r31, 0xF0	; 240
 864:	31 97       	sbiw	r30, 0x01	; 1
 866:	f1 f7       	brne	.-4      	; 0x864 <main+0x462>
		    }
		}
	      if((PIND & 0b1100) == 0) // UP or DOWN switch pressed
		{
		  _delay_ms(50);
		  MovementTimeCurrent-=5;
 868:	80 91 5f 01 	lds	r24, 0x015F
 86c:	90 91 60 01 	lds	r25, 0x0160
 870:	05 97       	sbiw	r24, 0x05	; 5
 872:	90 93 60 01 	sts	0x0160, r25
 876:	80 93 5f 01 	sts	0x015F, r24
		  if((PIND & 0b1100) == 0) // ...still pressed
 87a:	29 b1       	in	r18, 0x09	; 9
 87c:	2c 70       	andi	r18, 0x0C	; 12
 87e:	09 f0       	breq	.+2      	; 0x882 <main+0x480>
 880:	44 cf       	rjmp	.-376    	; 0x70a <main+0x308>
 882:	6f cf       	rjmp	.-290    	; 0x762 <main+0x360>
 884:	80 91 02 01 	lds	r24, 0x0102
 888:	3d ce       	rjmp	.-902    	; 0x504 <main+0x102>
	  PORTB &= 0b11111100; // Switching motor off

	  if(MovementTimeCurrent < 0) // This can happen when we press
				      // UP or DOWN switch 50 ms to
				      // upper position
	    MovementTimeCurrent=0;
 88a:	10 92 60 01 	sts	0x0160, r1
 88e:	10 92 5f 01 	sts	0x015F, r1
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	6e cf       	rjmp	.-292    	; 0x774 <main+0x372>
 898:	e3 2f       	mov	r30, r19
 89a:	f0 e0       	ldi	r31, 0x00	; 0

  for(i=0;i<rxbuffer_cur_len;i++) {
    buffer[i]=rxbuffer[i];
  }
  if(i<BUFFER_LEN)
    buffer[i]=0;
 89c:	e1 5c       	subi	r30, 0xC1	; 193
 89e:	fe 4f       	sbci	r31, 0xFE	; 254
 8a0:	10 82       	st	Z, r1
  rxbuffer_cur_len=0;
 8a2:	10 92 04 01 	sts	0x0104, r1

	  // Now let's check our command buffer
      	  if(transmission_ready_flag)
	    {
	      CopyFromRXtoParser();
	      transmission_ready_flag=0;
 8a6:	10 92 03 01 	sts	0x0103, r1
	      // Check if command in buffer is for us
	      if(IsTransmissionToOurs())
 8aa:	0e 94 06 01 	call	0x20c	; 0x20c <IsTransmissionToOurs>
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <main+0x4b2>
 8b2:	59 ce       	rjmp	.-846    	; 0x566 <main+0x164>
		{
		  // Ok, we have a command in buffer. We need to send something 
		  if((hndl=Parser())==NULL) // If no proper function avilable...
 8b4:	0e 94 3a 01 	call	0x274	; 0x274 <Parser>
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	21 f1       	breq	.+72     	; 0x904 <__stack+0x5>
		      buffer[0]=0;
		      buffer_cur_len=0;
		    }
		  else
		    { // Here we actually call our handler function
		      if (hndl()) // Called function returned error
 8bc:	fc 01       	movw	r30, r24
 8be:	09 95       	icall
 8c0:	88 23       	and	r24, r24
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0x4c4>
 8c4:	50 ce       	rjmp	.-864    	; 0x566 <main+0x164>
 8c6:	e3 e3       	ldi	r30, 0x33	; 51
 8c8:	f1 e0       	ldi	r31, 0x01	; 1
 8ca:	a1 e6       	ldi	r26, 0x61	; 97
 8cc:	b1 e0       	ldi	r27, 0x01	; 1
			{ 
			  // report error
			  for(i=0;i<INIT_LEN;i++)
			    txbuffer[i]=device_id[i];
 8ce:	81 91       	ld	r24, Z+
 8d0:	8d 93       	st	X+, r24
		  else
		    { // Here we actually call our handler function
		      if (hndl()) // Called function returned error
			{ 
			  // report error
			  for(i=0;i<INIT_LEN;i++)
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	ee 33       	cpi	r30, 0x3E	; 62
 8d6:	f8 07       	cpc	r31, r24
 8d8:	d1 f7       	brne	.-12     	; 0x8ce <main+0x4cc>
			    txbuffer[i]=device_id[i];
			  txbuffer[i]='E';  i++;
 8da:	70 92 6c 01 	sts	0x016C, r7
			  txbuffer[i]='R';  i++;
 8de:	90 92 6d 01 	sts	0x016D, r9
			  txbuffer[i]='R';  i++;
 8e2:	90 92 6e 01 	sts	0x016E, r9
			  txbuffer[i]='O';  i++;
 8e6:	f0 92 6f 01 	sts	0x016F, r15
			  txbuffer[i]='R';  i++;
 8ea:	90 92 70 01 	sts	0x0170, r9
			  txbuffer[i]='\n'; i++;
 8ee:	d0 92 71 01 	sts	0x0171, r13
			  txbuffer[i]=0;
 8f2:	10 92 72 01 	sts	0x0172, r1
			  uart_transmit();
 8f6:	0e 94 c5 01 	call	0x38a	; 0x38a <uart_transmit>
			  buffer[0]=0;
 8fa:	10 92 3f 01 	sts	0x013F, r1
			  buffer_cur_len=0;
 8fe:	10 92 05 01 	sts	0x0105, r1
 902:	31 ce       	rjmp	.-926    	; 0x566 <main+0x164>
 904:	e3 e3       	ldi	r30, 0x33	; 51
 906:	f1 e0       	ldi	r31, 0x01	; 1
 908:	a1 e6       	ldi	r26, 0x61	; 97
 90a:	b1 e0       	ldi	r27, 0x01	; 1
		{
		  // Ok, we have a command in buffer. We need to send something 
		  if((hndl=Parser())==NULL) // If no proper function avilable...
		    {
		      for(i=0;i<INIT_LEN;i++)
			txbuffer[i]=device_id[i];
 90c:	81 91       	ld	r24, Z+
 90e:	8d 93       	st	X+, r24
	      if(IsTransmissionToOurs())
		{
		  // Ok, we have a command in buffer. We need to send something 
		  if((hndl=Parser())==NULL) // If no proper function avilable...
		    {
		      for(i=0;i<INIT_LEN;i++)
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	ee 33       	cpi	r30, 0x3E	; 62
 914:	f8 07       	cpc	r31, r24
 916:	d1 f7       	brne	.-12     	; 0x90c <__stack+0xd>
			txbuffer[i]=device_id[i];
		      txbuffer[i]='E';  i++;
 918:	70 92 6c 01 	sts	0x016C, r7
		      txbuffer[i]='R';  i++;
 91c:	90 92 6d 01 	sts	0x016D, r9
		      txbuffer[i]='R';  i++;
 920:	90 92 6e 01 	sts	0x016E, r9
		      txbuffer[i]='O';  i++;
 924:	f0 92 6f 01 	sts	0x016F, r15
		      txbuffer[i]='R';  i++;
 928:	90 92 70 01 	sts	0x0170, r9
		      txbuffer[i]='_';  i++;
 92c:	80 92 71 01 	sts	0x0171, r8
		      txbuffer[i]='N';  i++;
 930:	8e e4       	ldi	r24, 0x4E	; 78
 932:	80 93 72 01 	sts	0x0172, r24
		      txbuffer[i]='O';  i++;
 936:	f0 92 73 01 	sts	0x0173, r15
		      txbuffer[i]='_';  i++;
 93a:	80 92 74 01 	sts	0x0174, r8
		      txbuffer[i]='F';  i++;
 93e:	96 e4       	ldi	r25, 0x46	; 70
 940:	90 93 75 01 	sts	0x0175, r25
		      txbuffer[i]='U';  i++;
 944:	95 e5       	ldi	r25, 0x55	; 85
 946:	90 93 76 01 	sts	0x0176, r25
		      txbuffer[i]='N';  i++;
 94a:	80 93 77 01 	sts	0x0177, r24
		      txbuffer[i]='C';  i++;
 94e:	93 e4       	ldi	r25, 0x43	; 67
 950:	90 93 78 01 	sts	0x0178, r25
		      txbuffer[i]='T';  i++;
 954:	94 e5       	ldi	r25, 0x54	; 84
 956:	90 93 79 01 	sts	0x0179, r25
		      txbuffer[i]='I';  i++;
 95a:	99 e4       	ldi	r25, 0x49	; 73
 95c:	90 93 7a 01 	sts	0x017A, r25
		      txbuffer[i]='O';  i++;
 960:	f0 92 7b 01 	sts	0x017B, r15
		      txbuffer[i]='N';  i++;
 964:	80 93 7c 01 	sts	0x017C, r24
		      txbuffer[i]='\n'; i++;
 968:	d0 92 7d 01 	sts	0x017D, r13
		      txbuffer[i]=0;
 96c:	10 92 7e 01 	sts	0x017E, r1
		  
		      uart_transmit();
 970:	0e 94 c5 01 	call	0x38a	; 0x38a <uart_transmit>
		      buffer[0]=0;
 974:	10 92 3f 01 	sts	0x013F, r1
		      buffer_cur_len=0;
 978:	10 92 05 01 	sts	0x0105, r1
 97c:	f4 cd       	rjmp	.-1048   	; 0x566 <main+0x164>
 */

void CopyFromRXtoParser(void) {
  unsigned char i;

  for(i=0;i<rxbuffer_cur_len;i++) {
 97e:	e0 e0       	ldi	r30, 0x00	; 0
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	8c cf       	rjmp	.-232    	; 0x89c <main+0x49a>

00000984 <__divmodhi4>:

#if defined (L_divmodhi4)
DEFUN __divmodhi4
    .global _div
_div:
    bst     r_arg1H,7           ; store sign of dividend
 984:	97 fb       	bst	r25, 7
    mov     __tmp_reg__,r_arg2H
 986:	07 2e       	mov	r0, r23
    brtc    0f
 988:	16 f4       	brtc	.+4      	; 0x98e <__divmodhi4+0xa>
    com     __tmp_reg__         ; r0.7 is sign of result
 98a:	00 94       	com	r0
    rcall   __divmodhi4_neg1    ; dividend negative: negate
 98c:	07 d0       	rcall	.+14     	; 0x99c <__divmodhi4_neg1>
0:
    sbrc    r_arg2H,7
 98e:	77 fd       	sbrc	r23, 7
    rcall   __divmodhi4_neg2    ; divisor negative: negate
 990:	09 d0       	rcall	.+18     	; 0x9a4 <__divmodhi4_neg2>
    XCALL   __udivmodhi4        ; do the unsigned div/mod
 992:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__udivmodhi4>
    sbrc    __tmp_reg__,7
 996:	07 fc       	sbrc	r0, 7
    rcall   __divmodhi4_neg2    ; correct remainder sign
 998:	05 d0       	rcall	.+10     	; 0x9a4 <__divmodhi4_neg2>
    brtc    __divmodhi4_exit
 99a:	3e f4       	brtc	.+14     	; 0x9aa <__divmodhi4_exit>

0000099c <__divmodhi4_neg1>:
__divmodhi4_neg1:
    ;; correct dividend/remainder sign
    com     r_arg1H
 99c:	90 95       	com	r25
    neg     r_arg1L
 99e:	81 95       	neg	r24
    sbci    r_arg1H,0xff
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
    ret
 9a2:	08 95       	ret

000009a4 <__divmodhi4_neg2>:
__divmodhi4_neg2:
    ;; correct divisor/result sign
    com     r_arg2H
 9a4:	70 95       	com	r23
    neg     r_arg2L
 9a6:	61 95       	neg	r22
    sbci    r_arg2H,0xff
 9a8:	7f 4f       	sbci	r23, 0xFF	; 255

000009aa <__divmodhi4_exit>:
__divmodhi4_exit:
    ret
 9aa:	08 95       	ret

000009ac <__udivmodhi4>:
	
#define	r_cnt	r21	/* loop count */

#if defined (L_udivmodhi4)
DEFUN __udivmodhi4
	sub	r_remL,r_remL
 9ac:	aa 1b       	sub	r26, r26
	sub	r_remH,r_remH	; clear remainder and carry
 9ae:	bb 1b       	sub	r27, r27
	ldi	r_cnt,17	; init loop counter
 9b0:	51 e1       	ldi	r21, 0x11	; 17
	rjmp	__udivmodhi4_ep	; jump to entry point
 9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <__udivmodhi4_ep>

000009b4 <__udivmodhi4_loop>:
__udivmodhi4_loop:
        rol	r_remL		; shift dividend into remainder
 9b4:	aa 1f       	adc	r26, r26
	rol	r_remH
 9b6:	bb 1f       	adc	r27, r27
        cp	r_remL,r_arg2L	; compare remainder & divisor
 9b8:	a6 17       	cp	r26, r22
	cpc	r_remH,r_arg2H
 9ba:	b7 07       	cpc	r27, r23
        brcs	__udivmodhi4_ep	; remainder < divisor
 9bc:	10 f0       	brcs	.+4      	; 0x9c2 <__udivmodhi4_ep>
        sub	r_remL,r_arg2L	; restore remainder
 9be:	a6 1b       	sub	r26, r22
        sbc	r_remH,r_arg2H
 9c0:	b7 0b       	sbc	r27, r23

000009c2 <__udivmodhi4_ep>:
__udivmodhi4_ep:
        rol	r_arg1L		; shift dividend (with CARRY)
 9c2:	88 1f       	adc	r24, r24
        rol	r_arg1H
 9c4:	99 1f       	adc	r25, r25
        dec	r_cnt		; decrement loop counter
 9c6:	5a 95       	dec	r21
        brne	__udivmodhi4_loop
 9c8:	a9 f7       	brne	.-22     	; 0x9b4 <__udivmodhi4_loop>
	com	r_arg1L
 9ca:	80 95       	com	r24
	com	r_arg1H
 9cc:	90 95       	com	r25
; div/mod results to return registers, as for the div() function
	mov_l	r_arg2L, r_arg1L	; quotient
 9ce:	bc 01       	movw	r22, r24
	mov_h	r_arg2H, r_arg1H
	mov_l	r_arg1L, r_remL		; remainder
 9d0:	cd 01       	movw	r24, r26
	mov_h	r_arg1H, r_remH
	ret
 9d2:	08 95       	ret

000009d4 <strncasecmp>:
 9d4:	fb 01       	movw	r30, r22
 9d6:	dc 01       	movw	r26, r24
 9d8:	41 50       	subi	r20, 0x01	; 1
 9da:	50 40       	sbci	r21, 0x00	; 0
 9dc:	88 f0       	brcs	.+34     	; 0xa00 <strncasecmp+0x2c>
 9de:	8d 91       	ld	r24, X+
 9e0:	81 34       	cpi	r24, 0x41	; 65
 9e2:	1c f0       	brlt	.+6      	; 0x9ea <strncasecmp+0x16>
 9e4:	8b 35       	cpi	r24, 0x5B	; 91
 9e6:	0c f4       	brge	.+2      	; 0x9ea <strncasecmp+0x16>
 9e8:	80 5e       	subi	r24, 0xE0	; 224
 9ea:	61 91       	ld	r22, Z+
 9ec:	61 34       	cpi	r22, 0x41	; 65
 9ee:	1c f0       	brlt	.+6      	; 0x9f6 <strncasecmp+0x22>
 9f0:	6b 35       	cpi	r22, 0x5B	; 91
 9f2:	0c f4       	brge	.+2      	; 0x9f6 <strncasecmp+0x22>
 9f4:	60 5e       	subi	r22, 0xE0	; 224
 9f6:	86 1b       	sub	r24, r22
 9f8:	61 11       	cpse	r22, r1
 9fa:	71 f3       	breq	.-36     	; 0x9d8 <strncasecmp+0x4>
 9fc:	99 0b       	sbc	r25, r25
 9fe:	08 95       	ret
 a00:	88 1b       	sub	r24, r24
 a02:	fc cf       	rjmp	.-8      	; 0x9fc <strncasecmp+0x28>

00000a04 <strnlen>:
 a04:	fc 01       	movw	r30, r24
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 90       	ld	r0, Z+
 a0c:	01 10       	cpse	r0, r1
 a0e:	d8 f7       	brcc	.-10     	; 0xa06 <strnlen+0x2>
 a10:	80 95       	com	r24
 a12:	90 95       	com	r25
 a14:	8e 0f       	add	r24, r30
 a16:	9f 1f       	adc	r25, r31
 a18:	08 95       	ret

00000a1a <_exit>:
ENDF _exit

	/* Code from .fini8 ... .fini1 sections inserted by ld script.  */

	.section .fini0,"ax",@progbits
	cli
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
__stop_program:
	rjmp	__stop_program
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>
