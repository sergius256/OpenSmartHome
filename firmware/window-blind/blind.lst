
blind.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000260  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083d  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067b  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024e  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032d  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001e  00000000  00000000  00001751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
/* __do_clear_bss is only necessary if there is anything in .bss section.  */

#ifdef L_clear_bss
	.section .init4,"ax",@progbits
DEFUN __do_clear_bss
	ldi	r18, hi8(__bss_end)
  74:	21 e0       	ldi	r18, 0x01	; 1
	ldi	r26, lo8(__bss_start)
  76:	a0 e0       	ldi	r26, 0x00	; 0
	ldi	r27, hi8(__bss_start)
  78:	b1 e0       	ldi	r27, 0x01	; 1
	rjmp	.do_clear_bss_start
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
.do_clear_bss_loop:
	st	X+, __zero_reg__
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
.do_clear_bss_start:
	cpi	r26, lo8(__bss_end)
  7e:	af 30       	cpi	r26, 0x0F	; 15
	cpc	r27, r18
  80:	b2 07       	cpc	r27, r18
	brne	.do_clear_bss_loop
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#endif

static volatile uint8_t key_press=0;

ISR (TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
 
  /*
   * read current state of keys (active-low),
   * clear corresponding bit in i when key has changed
   */
  i = key_state ^ ~((PIND & 0xF8) | (PINB & 0x07)) ;   // key changed ?
  a2:	89 b1       	in	r24, 0x09	; 9
  a4:	93 b1       	in	r25, 0x03	; 3
  a6:	30 91 05 01 	lds	r19, 0x0105
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	97 70       	andi	r25, 0x07	; 7
  ae:	89 2b       	or	r24, r25
  b0:	80 95       	com	r24
  b2:	28 2f       	mov	r18, r24
  b4:	23 27       	eor	r18, r19
   * ct0 and ct1 form a two bit counter for each key,  
   * where ct0 holds LSB and ct1 holds MSB
   * After a key is pressed longer than four times the
   * sampling period, the corresponding bit in key_state is set
   */
  ct0 = ~( ct0 & i );	  // reset or count ct0
  b6:	90 91 04 01 	lds	r25, 0x0104
  ba:	92 23       	and	r25, r18
  bc:	89 2f       	mov	r24, r25
  be:	80 95       	com	r24
  c0:	80 93 04 01 	sts	0x0104, r24
  ct1 = (ct0 ^ ct1) & i;  // reset or count ct1  
  c4:	90 91 03 01 	lds	r25, 0x0103
  c8:	98 27       	eor	r25, r24
  ca:	92 23       	and	r25, r18
  cc:	90 93 03 01 	sts	0x0103, r25
  d0:	82 23       	and	r24, r18
  i &= ct0 & ct1;	  // count until roll over ?
  d2:	89 23       	and	r24, r25
  key_state ^= i;	  // then toggle debounced state
  d4:	93 2f       	mov	r25, r19
  d6:	98 27       	eor	r25, r24
  d8:	90 93 05 01 	sts	0x0105, r25
  /*
   * To notify main program of pressed key, the correspondig bit
   * in global variable key_press is set.
   * The main loop needs to clear this bit
   */
  key_press |= key_state & i;	// 0->1: key press detect
  dc:	20 91 06 01 	lds	r18, 0x0106
  e0:	89 23       	and	r24, r25
  e2:	82 2b       	or	r24, r18
  e4:	80 93 06 01 	sts	0x0106, r24

}
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:

unsigned char FSM_State=0, CurrentPosition=0, DesiredPosition=0;
unsigned long int MovementTimeFull,MovementTimeCurrent;

void main(void) {
  DDRB  = 0x03;  // DDRB =0b00000011;
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	84 b9       	out	0x04, r24	; 4
  DDRD  = 0x06;  // DDRD =0b00000110;
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	8a b9       	out	0x0a, r24	; 10
  PORTB = 0xFC;  // PORTB=0b11111100;
 102:	8c ef       	ldi	r24, 0xFC	; 252
 104:	85 b9       	out	0x05, r24	; 5
  PORTD = 0xF8;  // PORTD=0b11111000;
 106:	88 ef       	ldi	r24, 0xF8	; 248
 108:	8b b9       	out	0x0b, r24	; 11

  TCCR0A |= _BV(WGM01);            // CTC mode, OC0A pin disabled
 10a:	84 b5       	in	r24, 0x24	; 36
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	84 bd       	out	0x24, r24	; 36
  OCR0A  |=  (int) F_CPU/1024/DEBOUNCE - 1;  // timer = 5 msec
 110:	87 b5       	in	r24, 0x27	; 39
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bd       	out	0x27, r24	; 39
  TIMSK0 |= _BV(OCIE0A);           // enable Output Compare 1 overflow interrupt
 116:	80 91 6e 00 	lds	r24, 0x006E
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 93 6e 00 	sts	0x006E, r24
  sei();
 120:	78 94       	sei
  TCCR0B |= _BV(CS00)+_BV(CS02);   // F_CPU/1024, see next line
 122:	85 b5       	in	r24, 0x25	; 37
 124:	85 60       	ori	r24, 0x05	; 5
 126:	85 bd       	out	0x25, r24	; 37
  
  FSM_State=0;
 128:	10 92 02 01 	sts	0x0102, r1
 12c:	80 e0       	ldi	r24, 0x00	; 0
    {
      switch(FSM_State)
	{
	case 0:
	  // Switching motor on in forward direction:
	  PORTB=0x05; // 0101
 12e:	45 e0       	ldi	r20, 0x05	; 5
	  FSM_State=1;
 130:	31 e0       	ldi	r19, 0x01	; 1
	      FSM_State=2;
	    }
	  break;
	case 2:
	  // Switching motor on in backward direction:
	  PORTB=0x06; // 0110
 132:	26 e0       	ldi	r18, 0x06	; 6
	  FSM_State=3;
 134:	93 e0       	ldi	r25, 0x03	; 3
  FSM_State=0;

  // Infinite main loop
  for(;;)
    {
      switch(FSM_State)
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	71 f0       	breq	.+28     	; 0x156 <main+0x5c>
 13a:	50 f0       	brcs	.+20     	; 0x150 <main+0x56>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	89 f0       	breq	.+34     	; 0x162 <main+0x68>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	c9 f7       	brne	.-14     	; 0x136 <main+0x3c>
	  PORTB=0x06; // 0110
	  FSM_State=3;
	case 3:
	  // _delay_ms(10);
	  // MovementTimeFull++;
	  if(key_press & 0x08) // 0x20 0b0010 0000)) // END2 switch _BV(PD5))) // 
 144:	80 91 06 01 	lds	r24, 0x0106
 148:	83 ff       	sbrs	r24, 3
 14a:	12 c0       	rjmp	.+36     	; 0x170 <main+0x76>
	    {
	      key_press=0;
 14c:	10 92 06 01 	sts	0x0106, r1
    {
      switch(FSM_State)
	{
	case 0:
	  // Switching motor on in forward direction:
	  PORTB=0x05; // 0101
 150:	45 b9       	out	0x05, r20	; 5
	  FSM_State=1;
 152:	30 93 02 01 	sts	0x0102, r19
	case 1:
	  // _delay_ms(10);
	  // MovementTimeCurrent++;
	  if(key_press & 0x40) // 0x10 // END1 switch _BV(PD4))) //
 156:	80 91 06 01 	lds	r24, 0x0106
 15a:	86 ff       	sbrs	r24, 6
 15c:	09 c0       	rjmp	.+18     	; 0x170 <main+0x76>
	    {
	      key_press=0;
 15e:	10 92 06 01 	sts	0x0106, r1
	      FSM_State=2;
	    }
	  break;
	case 2:
	  // Switching motor on in backward direction:
	  PORTB=0x06; // 0110
 162:	25 b9       	out	0x05, r18	; 5
	  FSM_State=3;
 164:	90 93 02 01 	sts	0x0102, r25
	case 3:
	  // _delay_ms(10);
	  // MovementTimeFull++;
	  if(key_press & 0x08) // 0x20 0b0010 0000)) // END2 switch _BV(PD5))) // 
 168:	80 91 06 01 	lds	r24, 0x0106
 16c:	83 fd       	sbrc	r24, 3
 16e:	ee cf       	rjmp	.-36     	; 0x14c <main+0x52>
 170:	80 91 02 01 	lds	r24, 0x0102
 174:	e0 cf       	rjmp	.-64     	; 0x136 <main+0x3c>

00000176 <_exit>:
ENDF _exit

	/* Code from .fini8 ... .fini1 sections inserted by ld script.  */

	.section .fini0,"ax",@progbits
	cli
 176:	f8 94       	cli

00000178 <__stop_program>:
__stop_program:
	rjmp	__stop_program
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
